{"ast":null,"code":"import firebase from 'firebase';\nimport EventEmitter from 'events';\n\nclass ContentManager extends EventEmitter {\n  constructor() {\n    super();\n    this.unsubs = [];\n    this.articles = [];\n    this.userDocument = void 0;\n    this.authenticated = void 0;\n\n    if (!firebase.apps.length) {\n      firebase.initializeApp({\n        apiKey: 'AIzaSyA9hYjJ-QSNR9xoy8qaCf-0lq4pyWHBu60',\n        authDomain: 'psy-website-2cd73.firebaseapp.com',\n        projectId: 'psy-website-2cd73',\n        storageBucket: 'psy-website-2cd73.appspot.com',\n        messagingSenderId: '469038815545',\n        appId: '1:469038815545:web:d16aa8f224d5bd86e8f0e8',\n        measurementId: 'G-S5X1QPJ92J'\n      });\n    } else {\n      firebase.app();\n    }\n\n    this.authenticated = !!firebase.auth().currentUser;\n    this.unsubs.push(firebase.auth().onAuthStateChanged(this.handleAuthChanged.bind(this)));\n    this.unsubs.push(firebase.firestore().collection('articles').onSnapshot(this.handleContentChanged.bind(this)));\n    window.contentManager = this;\n  }\n\n  destroy() {\n    this.unsubs.forEach(unsub => unsub === null || unsub === void 0 ? void 0 : unsub());\n    this.removeAllListeners();\n  }\n\n  async handleAuthChanged(user) {\n    this.authenticated = !!user;\n\n    if (user) {\n      this.userDocument = (await firebase.firestore().collection('users').doc(user.uid).get()).data();\n\n      if (this.userDocument && !this.userDocument.purchasedArticles) {\n        var _this$userDocument$re;\n\n        (_this$userDocument$re = this.userDocument.ref) === null || _this$userDocument$re === void 0 ? void 0 : _this$userDocument$re.set({\n          purchasedArticles: []\n        }, {\n          merge: true\n        });\n      }\n    }\n\n    this.handleContentChanged();\n    this.emit('auth', user);\n  }\n\n  async handleContentChanged() {\n    const db = firebase.firestore();\n    const articleDocs = (await db.collection('articles').get()).docs;\n    const articles = articleDocs.map(doc => doc.data());\n    await Promise.all(articleDocs.map(async (doc, index) => {\n      var _this$userDocument, _this$userDocument2;\n\n      const purchased = (_this$userDocument = this.userDocument) === null || _this$userDocument === void 0 ? void 0 : _this$userDocument.purchasedArticles.includes(doc.id);\n      const admin = ((_this$userDocument2 = this.userDocument) === null || _this$userDocument2 === void 0 ? void 0 : _this$userDocument2.role) === \"admin\";\n      articles[index].purchased = purchased;\n      articles[index].id = doc.id;\n\n      if (purchased || admi) {\n        var _await$doc$ref$collec;\n\n        articles[index].data = await ((_await$doc$ref$collec = (await doc.ref.collection('full').doc('content').get()).data()) === null || _await$doc$ref$collec === void 0 ? void 0 : _await$doc$ref$collec.data);\n      }\n    }));\n    this.articles = articles;\n    this.emit('article', articles);\n  }\n\n  addListener(event, listener) {\n    return super.addListener(event, listener);\n  }\n\n  async modifyArticle(id, description, title, data) {\n    let article = firebase.firestore().collection(\"articles\").doc(id);\n    await article.update({\n      description: description,\n      title: title\n    });\n    await article.collection('full').doc('content').update({\n      data: data\n    });\n    console.log(\"updated article!\");\n  }\n\n  async createArticle(description, title, data) {\n    let article = firebase.firestore().collection(\"articles\").doc();\n    await article.set({\n      description: description,\n      title: title\n    });\n    await article.collection('full').doc('content').set({\n      data: data\n    });\n    console.log(data);\n  }\n\n}\n\nconst contentManager = new ContentManager();\nexport default contentManager;","map":{"version":3,"sources":["/Users/emilessung/dev/psy-website/src/ContentManager.ts"],"names":["firebase","EventEmitter","ContentManager","constructor","unsubs","articles","userDocument","authenticated","apps","length","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","auth","currentUser","push","onAuthStateChanged","handleAuthChanged","bind","firestore","collection","onSnapshot","handleContentChanged","window","contentManager","destroy","forEach","unsub","removeAllListeners","user","doc","uid","get","data","purchasedArticles","ref","set","merge","emit","db","articleDocs","docs","map","Promise","all","index","purchased","includes","id","admin","role","admi","addListener","event","listener","modifyArticle","description","title","article","update","console","log","createArticle"],"mappings":"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","sourcesContent":["import {Article, UserDoc} from './interfaces';\nimport firebase from 'firebase';\nimport EventEmitter from 'events';\n\nclass ContentManager extends EventEmitter {\n    private unsubs: (firebase.Unsubscribe | undefined)[] = [];\n    public articles: Article[] = [];\n    public userDocument?: UserDoc;\n    public authenticated: boolean;\n\n    constructor() {\n        super();\n\n        if (!firebase.apps.length) {\n            firebase.initializeApp({\n                apiKey: 'AIzaSyA9hYjJ-QSNR9xoy8qaCf-0lq4pyWHBu60',\n                authDomain: 'psy-website-2cd73.firebaseapp.com',\n                projectId: 'psy-website-2cd73',\n                storageBucket: 'psy-website-2cd73.appspot.com',\n                messagingSenderId: '469038815545',\n                appId: '1:469038815545:web:d16aa8f224d5bd86e8f0e8',\n                measurementId: 'G-S5X1QPJ92J'\n            });\n        } else {\n            firebase.app();\n        }\n\n        this.authenticated = !!firebase.auth().currentUser;\n        this.unsubs.push(firebase.auth().onAuthStateChanged(this.handleAuthChanged.bind(this)));\n        this.unsubs.push(firebase.firestore().collection('articles').onSnapshot(this.handleContentChanged.bind(this)));\n\n        (window as any).contentManager = this;\n    }\n\n    public destroy() {\n        this.unsubs.forEach(unsub => unsub?.());\n        this.removeAllListeners();\n    }\n\n    private async handleAuthChanged(user: firebase.User | null) {\n        this.authenticated = !!user;\n\n        if (user) {\n            this.userDocument = (await firebase.firestore().collection('users').doc(user.uid).get()).data() as UserDoc;\n            if (this.userDocument && !this.userDocument.purchasedArticles) {\n                this.userDocument.ref?.set(\n                    {\n                        purchasedArticles: []\n                    },\n                    {merge: true}\n                );\n            }\n        }\n\n        this.handleContentChanged();\n\n        this.emit('auth', user);\n    }\n\n    private async handleContentChanged() {\n        const db = firebase.firestore();\n        const articleDocs = (await db.collection('articles').get()).docs;\n        const articles = articleDocs.map(doc => doc.data() as Article);\n        await Promise.all(\n            articleDocs.map(async (doc, index) => {\n                const purchased = this.userDocument?.purchasedArticles.includes(doc.id);\n                const admin = this.userDocument?.role === \"admin\";\n                articles[index].purchased = purchased;\n                articles[index].id = doc.id;\n                if (purchased || admi) {\n                    articles[index].data = await (await doc.ref.collection('full').doc('content').get()).data()?.data;\n                }\n            })\n        );\n\n        this.articles = articles;\n        this.emit('article', articles);\n    }\n\n    public addListener(event: 'auth', listener: (user: firebase.User | null) => void): this;\n    public addListener(event: 'article', listener: (article: Article[]) => void): this;\n    public addListener(event: string, listener: (...args: any[]) => void): this {\n        return super.addListener(event, listener);\n    }\n\n    async modifyArticle(id: string, description: string, title: string, data: string) {\n        let article = firebase.firestore().collection(\"articles\").doc(id);\n\n        await article.update({description : description, title: title});\n        await article.collection('full').doc('content').update({data: data});\n        console.log(\"updated article!\");\n    }\n\n    async createArticle(description: string, title: string, data: string) {\n        let article = firebase.firestore().collection(\"articles\").doc();\n        \n        await article.set({\n            description: description,\n            title: title\n        });\n\n        await article.collection('full').doc('content').set({data: data})\n        console.log(data);\n    }\n\n}\n\nconst contentManager = new ContentManager();\n\nexport default contentManager;\n"]},"metadata":{},"sourceType":"module"}